import React, { useState, useEffect } from 'react';
import { AppState, User, UserFormData } from './types';
import { loadBoothData } from './utils/dataLoader';
import { userService } from './services/supabase';
import { llmService } from './services/llm';
import { GPSService } from './services/gpsService';
import LandingPage from './components/LandingPage';
import UserFormPage from './components/UserFormPage';
import FollowUpQuestionsPage from './components/FollowUpQuestionsPage';
import LoadingPage from './components/LoadingPage';
import MainPage from './components/MainPage';
import BoothDetailPage from './components/BoothDetailPage';
import MapPage from './components/MapPage';
import SurveyPage from './components/SurveyPage';
import CompletePage from './components/CompletePage';

const App: React.FC = () => {
  const [state, setState] = useState<AppState>({
    currentUser: null,
    currentPage: 'landing',
    recommendations: [],
    selectedBooth: null,
    boothData: [],
    evaluation: null,
    userFormData: null
  });

  const [followUpData, setFollowUpData] = useState<{ summary: string; questions: string[] } | null>(null);

  useEffect(() => {
    // Î∂ÄÏä§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    const loadData = async () => {
      try {
        const boothData = await loadBoothData();
        setState(prev => ({ ...prev, boothData }));
        
        // sessionStorageÏóêÏÑú ÏÉÅÌÉú Î≥µÏõê ÏãúÎèÑ
        const savedState = sessionStorage.getItem('appState');
        if (savedState) {
          try {
            const parsedState = JSON.parse(savedState);
            console.log('ÏÉÅÌÉú Î≥µÏõê:', parsedState);
            setState(prev => ({
              ...prev,
              currentUser: parsedState.currentUser,
              currentPage: parsedState.currentPage,
              recommendations: parsedState.recommendations || [],
              selectedBooth: parsedState.selectedBooth,
              boothData // Î∂ÄÏä§ Îç∞Ïù¥ÌÑ∞Îäî ÏÉàÎ°ú Î°úÎìúÌïú Í≤É ÏÇ¨Ïö©
            }));
          } catch (error) {
            console.error('ÏÉÅÌÉú Î≥µÏõê Ïò§Î•ò:', error);
            sessionStorage.removeItem('appState');
          }
        }
      } catch (error) {
        console.error('Î∂ÄÏä§ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
      }
    };
    
    loadData();
  }, []);

  // Ï∂îÏ≤ú Í≤∞Í≥º Ï§ëÎ≥µ Ï†úÍ±∞ (Îí§ Ìï≠Î™© Ï†úÍ±∞ = ÏµúÏ¥à Ìï≠Î™© Ïú†ÏßÄ)
  const dedupeRecommendations = (list: any[]) => {
    const seen = new Set<string | number>();
    const result: any[] = [];
    for (const item of list || []) {
      if (!item?.id) continue; // idÍ∞Ä ÏóÜÎäî Ìï≠Î™©ÏùÄ Í±¥ÎÑàÎõ∞Í∏∞
      
      const id = item.id; // idÎ•º Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö© (Î¨∏ÏûêÏó¥Ïù¥Îì† Ïà´ÏûêÎì†)
      if (!seen.has(id)) {
        seen.add(id);
        result.push(item);
      }
    }
    console.log('Ï§ëÎ≥µ Ï†úÍ±∞ Ï≤òÎ¶¨:', { ÏûÖÎ†•Í∞úÏàò: list?.length, Ï∂úÎ†•Í∞úÏàò: result.length });
    return result;
  };

  const startGPSTracking = async (userId: string) => {
    console.log('üöÄ App.tsx: startGPSTracking Ìò∏Ï∂úÎê®', { userId });
    
    // Í∏∞Ï°¥ GPS ÏÑúÎπÑÏä§Í∞Ä ÏûàÏúºÎ©¥ ÏôÑÏ†ÑÌûà Ï†ïÎ¶¨
    if (window.gpsService) {
      console.log('üõë Í∏∞Ï°¥ GPS ÏÑúÎπÑÏä§ Ï†ïÎ¶¨ Ï§ë...');
      window.gpsService.stopTracking();
      window.gpsService = null;
      console.log('‚úÖ Í∏∞Ï°¥ GPS ÏÑúÎπÑÏä§ Ï†ïÎ¶¨ ÏôÑÎ£å');
    }
    
    try {
      console.log('üöÄ App.tsx: GPS Ï∂îÏ†Å ÏãúÏûë ÏãúÎèÑ', {
        userId: userId,
        hasGeolocation: !!navigator.geolocation,
        userAgent: navigator.userAgent
      });
      
      const gpsService = new GPSService(userId);
      window.gpsService = gpsService;
      console.log('‚úÖ GPSService Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±Îê®', { userId: gpsService.userId });
      
      await gpsService.startTracking(
        (location) => {
          console.log('üìç App.tsx: GPS ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏ ÏΩúÎ∞±:', location);
        },
        (error) => {
          console.error('‚ùå App.tsx: GPS Ïò§Î•ò ÏΩúÎ∞±:', error);
        }
      );
      console.log('‚úÖ App.tsx: GPS Ï∂îÏ†Å ÏãúÏûë ÏÑ±Í≥µ');
      
      // GPS ÏÑúÎπÑÏä§ ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ Ï∂úÎ†•
      setTimeout(() => {
        if (window.gpsService) {
          console.log('üîç GPS ÏÑúÎπÑÏä§ ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥:', window.gpsService.getDebugInfo());
        }
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå App.tsx: GPS Ï∂îÏ†Å ÏãúÏûë Ïã§Ìå®:', error);
    }
  };

  const handleUserValid = async (userId: string, userData: any) => {
    console.log('üéØ App.tsx: handleUserValid Ìò∏Ï∂úÎê®', { userId, userData });
    try {
      // Admin Î™®Îìú Ï≤òÎ¶¨ (userId === '0')
      if (userId === '0') {
        const adminUser: User = {
          user_id: '0',
          initial_form_started_at: undefined,
          initial_form_submitted_at: undefined,
          skipped_at: undefined,
          additional_form_submitted_at: undefined,
          ended_at: undefined
        };
        
        setState(prev => ({
          ...prev,
          currentUser: adminUser,
          recommendations: [],
          currentPage: 'map'
        }));
        return;
      }

      if (!userData) {
        alert('ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }

      // ÏÉàÎ°úÏö¥ ÏÇ¨Ïö©Ïûê ÌîåÎ°úÏö∞Ïóê Îî∞Î•∏ ÌéòÏù¥ÏßÄ Í≤∞Ï†ï
      // 1. ÏÉà ÏÇ¨Ïö©Ïûê (initial_form_started_atÏù¥ ÏóÜÏùå) -> GPS Í∂åÌïú ÏöîÏ≤≠ ÌõÑ Ï¥àÍ∏∞ Ìèº
      // 2. Ï¥àÍ∏∞ Ìèº ÎØ∏ÏôÑÎ£å (initial_form_submitted_atÏù¥ ÏóÜÏùå) -> Ï¥àÍ∏∞ Ìèº
      // 3. Ï¥àÍ∏∞ Ìèº ÏôÑÎ£å, Ï∂îÍ∞Ä Ìèº ÎØ∏ÏôÑÎ£å (ended_at ÏûàÏùå, skipped_atÍ≥º additional_form_submitted_at ÏóÜÏùå) -> Ï∂îÍ∞Ä ÏßàÎ¨∏
      // 4. ÏôÑÎ£åÎêú ÏÇ¨Ïö©Ïûê (skipped_at ÎòêÎäî additional_form_submitted_at ÏûàÏùå) -> Î©îÏù∏ ÌéòÏù¥ÏßÄ
      
      console.log('ÏÇ¨Ïö©Ïûê ÏÉÅÌÉú ÌôïÏù∏:', {
        userId: userData.user_id,
        initial_form_started_at: userData.initial_form_started_at,
        initial_form_submitted_at: userData.initial_form_submitted_at,
        ended_at: userData.ended_at,
        skipped_at: userData.skipped_at,
        additional_form_submitted_at: userData.additional_form_submitted_at,
        has_rec_result: !!userData.rec_result
      });

      if (!userData.initial_form_started_at) {
        // ÏÉà ÏÇ¨Ïö©Ïûê - GPS Í∂åÌïú ÏöîÏ≤≠ ÌõÑ Ï¥àÍ∏∞ ÌèºÏúºÎ°ú
        setState(prev => ({
          ...prev,
          currentUser: userData as User,
          currentPage: 'form'
        }));
        
        // GPS Ï∂îÏ†Å ÏãúÏûë
        await startGPSTracking(userData.user_id);
        return;
      }

      if (!userData.initial_form_submitted_at) {
        // Ï¥àÍ∏∞ Ìèº ÎØ∏ÏôÑÎ£å - Ï¥àÍ∏∞ ÌèºÏúºÎ°ú
        setState(prev => ({
          ...prev,
          currentUser: userData as User,
          currentPage: 'form'
        }));
        
        // GPS Ï∂îÏ†Å ÏãúÏûë
        await startGPSTracking(userData.user_id);
        return;
      }

      if (userData.ended_at && !userData.skipped_at && !userData.additional_form_submitted_at) {
        // Ï¥àÍ∏∞ Ìèº ÏôÑÎ£å, Ï∂îÍ∞Ä Ìèº ÎØ∏ÏôÑÎ£å - Ï∂îÏ≤ú ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô (Ï∂îÍ∞Ä ÏßàÎ¨∏ Ïä§ÌÇµ)
        const recommendations = userData.rec_result ? dedupeRecommendations(JSON.parse(userData.rec_result)) : [];
        
        console.log('Ï∂îÍ∞Ä ÏßàÎ¨∏ Îã®Í≥Ñ ÏÇ¨Ïö©Ïûê - Ï∂îÏ≤ú ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô:', {
          userId: userData.user_id,
          hasRecommendations: recommendations.length > 0,
          recommendationsCount: recommendations.length
        });
        
        setState(prev => ({
          ...prev,
          currentUser: userData as User,
          recommendations,
          currentPage: 'recommendations'
        }));
        return;
      }

      if (userData.skipped_at || userData.additional_form_submitted_at) {
        // ÏôÑÎ£åÎêú ÏÇ¨Ïö©Ïûê - Î©îÏù∏ ÌéòÏù¥ÏßÄÎ°ú
        // Ï∂îÏ≤ú Í≤∞Í≥ºÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ ÌååÏã±ÌïòÏó¨ Ï†ÑÎã¨
        const recommendations = userData.rec_result ? dedupeRecommendations(JSON.parse(userData.rec_result)) : [];
        
        console.log('ÏôÑÎ£åÎêú ÏÇ¨Ïö©Ïûê Î°úÍ∑∏Ïù∏:', {
          userId: userData.user_id,
          hasRecommendations: recommendations.length > 0,
          recommendationsCount: recommendations.length
        });
        
        setState(prev => ({
          ...prev,
          currentUser: userData as User,
          recommendations,
          currentPage: 'recommendations'
        }));
        
        // GPS Ï∂îÏ†Å ÏãúÏûë
        await startGPSTracking(userData.user_id);
        return;
      }

      // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Ï¥àÍ∏∞ ÌèºÏúºÎ°ú
      setState(prev => ({
        ...prev,
        currentUser: userData as User,
        currentPage: 'form'
      }));

      // GPS Ï∂îÏ†Å ÏãúÏûë
      await startGPSTracking(userData.user_id);

    } catch (error) {
      console.error('ÏÇ¨Ïö©Ïûê Í≤ÄÏ¶ù Ïò§Î•ò:', error);
      alert('ÏÇ¨Ïö©Ïûê Í≤ÄÏ¶ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const handleFormSubmit = async (formData: UserFormData) => {
    if (!state.currentUser) return;

    try {
      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏóÖÎç∞Ïù¥Ìä∏
      await userService.updateUserFormData(state.currentUser.user_id, formData);
      await userService.updateInitialFormSubmittedAt(state.currentUser.user_id);
      
      // Ìèº Îç∞Ïù¥ÌÑ∞Î•º ÏÉÅÌÉúÏóê Ï†ÄÏû•
      setState(prev => ({
        ...prev,
        userFormData: formData
      }));

      // Î°úÎî© ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      setState(prev => ({
        ...prev,
        currentPage: 'loading'
      }));

      // Gemini APIÎ•º ÌÜµÌïú Ï∂îÍ∞Ä ÏßàÎ¨∏ ÏÉùÏÑ±
      const visitorInfo = createVisitorInfo(state.currentUser, formData, []);
      console.log('=== App.tsx: Ï∂îÍ∞Ä ÏßàÎ¨∏ ÏÉùÏÑ± ÏãúÏûë ===');
      
      const followUpResult = await llmService.generateFollowUpQuestions(visitorInfo);
      console.log('LLMÏóêÏÑú ÏÉùÏÑ±Îêú Ï∂îÍ∞Ä ÏßàÎ¨∏:', followUpResult);
      
      setFollowUpData(followUpResult);

      // Ï∂îÍ∞Ä ÏßàÎ¨∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      setState(prev => ({
        ...prev,
        currentPage: 'followup'
      }));
    } catch (error) {
      console.error('Ìèº Ï†úÏ∂ú Ïò§Î•ò:', error);
      alert('Ìèº Ï†úÏ∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      setState(prev => ({
        ...prev,
        currentPage: 'form'
      }));
    }
  };


  const handleFollowUpSubmit = async (questionAnswerPairs: Array<{ question: string; answer: string }>) => {
    if (!state.currentUser || !state.userFormData) return;

    try {
      // Ï∂îÍ∞Ä ÏßàÎ¨∏ ÎãµÎ≥Ä Ï†ÄÏû•
      await userService.updateFollowUpAnswers(
        state.currentUser.user_id, 
        JSON.stringify(questionAnswerPairs)
      );
      
      // Ï∂îÍ∞Ä Ìèº Ï†úÏ∂ú ÏôÑÎ£å ÌëúÏãú
      await userService.updateAdditionalFormSubmittedAt(state.currentUser.user_id);
      
      // Î°úÎî© ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      setState(prev => ({
        ...prev,
        currentPage: 'loading'
      }));

      // LLM API Ìò∏Ï∂ú - Ï∂îÍ∞Ä ÎãµÎ≥ÄÍπåÏßÄ Ìè¨Ìï®ÌïòÏó¨ Ï∂îÏ≤ú ÏÉùÏÑ±
      const visitorInfo = createVisitorInfo(
        state.currentUser,
        state.userFormData,
        questionAnswerPairs
      );
      console.log('=== App.tsx: Ï∂îÏ≤ú ÏÉùÏÑ± ÏãúÏûë (Ï∂îÍ∞Ä ÏßàÎ¨∏ Ìè¨Ìï®) ===');
      console.log('Î∂ÄÏä§ Îç∞Ïù¥ÌÑ∞ Í∞úÏàò:', state.boothData.length);
      
      const rawRecommendations = await llmService.getRecommendations(state.boothData, visitorInfo);
      console.log('LLMÏóêÏÑú Î∞õÏùÄ ÏõêÎ≥∏ Ï∂îÏ≤ú:', rawRecommendations);
      console.log('ÏõêÎ≥∏ Ï∂îÏ≤ú Í∏∏Ïù¥:', rawRecommendations?.length);
      
      const recommendations = dedupeRecommendations(rawRecommendations);
      console.log('Ï§ëÎ≥µ Ï†úÍ±∞ ÌõÑ Ï∂îÏ≤ú:', recommendations);
      console.log('Ï§ëÎ≥µ Ï†úÍ±∞ ÌõÑ Ï∂îÏ≤ú Í∏∏Ïù¥:', recommendations?.length);
      
      // Ï∂îÏ≤ú Í≤∞Í≥ºÎ•º Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
      await userService.updateUserRecommendation(
        state.currentUser.user_id, 
        JSON.stringify(recommendations)
      );

      setState(prev => ({
        ...prev,
        recommendations,
        currentPage: 'recommendations'
      }));
    } catch (error) {
      console.error('Ï∂îÏ≤ú ÏÉùÏÑ± Ïò§Î•ò:', error);
      alert('Ï∂îÏ≤ú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      setState(prev => ({
        ...prev,
        currentPage: 'followup'
      }));
    }
  };

  const handleSkipFollowUp = async () => {
    if (!state.currentUser) return;

    try {
      // Ïä§ÌÇµ ÌëúÏãú
      await userService.updateSkippedAt(state.currentUser.user_id);
      
      // Î°úÎî© ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
      setState(prev => ({
        ...prev,
        currentPage: 'loading'
      }));

      // LLM API Ìò∏Ï∂ú - Ï¥àÍ∏∞ ÌèºÎßåÏúºÎ°ú Ï∂îÏ≤ú ÏÉùÏÑ±
      const visitorInfo = createVisitorInfo(
        state.currentUser,
        state.userFormData || { age: 0, gender: '', interests: {}, visitPurpose: '' },
        null
      );
      console.log('=== App.tsx: Ï∂îÏ≤ú ÏÉùÏÑ± ÏãúÏûë (Ïä§ÌÇµ) ===');
      console.log('Î∂ÄÏä§ Îç∞Ïù¥ÌÑ∞ Í∞úÏàò:', state.boothData.length);
      
      const rawRecommendations = await llmService.getRecommendations(state.boothData, visitorInfo);
      console.log('LLMÏóêÏÑú Î∞õÏùÄ ÏõêÎ≥∏ Ï∂îÏ≤ú:', rawRecommendations);
      console.log('ÏõêÎ≥∏ Ï∂îÏ≤ú Í∏∏Ïù¥:', rawRecommendations?.length);
      
      const recommendations = dedupeRecommendations(rawRecommendations);
      console.log('Ï§ëÎ≥µ Ï†úÍ±∞ ÌõÑ Ï∂îÏ≤ú:', recommendations);
      console.log('Ï§ëÎ≥µ Ï†úÍ±∞ ÌõÑ Ï∂îÏ≤ú Í∏∏Ïù¥:', recommendations?.length);
      
      // Ï∂îÏ≤ú Í≤∞Í≥ºÎ•º Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
      await userService.updateUserRecommendation(
        state.currentUser.user_id, 
        JSON.stringify(recommendations)
      );

      setState(prev => ({
        ...prev,
        recommendations,
        currentPage: 'recommendations'
      }));
    } catch (error) {
      console.error('Ï∂îÏ≤ú ÏÉùÏÑ± Ïò§Î•ò:', error);
      alert('Ï∂îÏ≤ú ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      setState(prev => ({
        ...prev,
        currentPage: 'followup'
      }));
    }
  };

  const createVisitorInfo = (
    _user: User, 
    formData: UserFormData, 
    questionAnswerPairs: Array<{ question: string; answer: string }> | null
  ): string => {
    let info = `ÎÇòÏù¥: ${formData.age}ÏÑ∏\n`;
    info += `ÏÑ±Î≥Ñ: ${formData.gender}\n`;
    info += `Î∞©Î¨∏ Î™©Ï†Å: ${formData.visitPurpose}\n`;
    
    const interestEntries = formData.interests ? Object.entries(formData.interests) : [];
    
    if (interestEntries.length > 0) {
      info += '\nÏÑ†ÌÉùÌïú Í¥ÄÏã¨ÏÇ¨:\n';
      for (const [subcategory, items] of interestEntries) {
        if (items && items.length > 0) {
          info += `  ${subcategory}: ${items.join(', ')}\n`;
        }
      }
    }
    
    // Ï∂îÍ∞Ä ÏßàÎ¨∏-ÎãµÎ≥Ä Ìè¨Ìï®
    if (questionAnswerPairs && questionAnswerPairs.length > 0) {
      info += `\n\nÏ∂îÍ∞Ä ÏßàÎ¨∏ Î∞è ÎãµÎ≥Ä:\n`;
      questionAnswerPairs.forEach((pair, index) => {
        info += `\nQ${index + 1}. ${pair.question}\n`;
        info += `A${index + 1}. ${pair.answer}\n`;
      });
    }
    
    console.log(info);
    return info;
  };


  const handleUserUpdate = (updatedUser: User) => {
    setState(prev => ({
      ...prev,
      currentUser: updatedUser
    }));
  };


  const handleSurveyComplete = (updatedUser: User) => {
    setState(prev => ({
      ...prev,
      currentUser: updatedUser,
      currentPage: 'complete'
    }));
  };

  const handleBack = () => {
    setState(prev => {
      if (prev.currentPage === 'detail') {
        return {
          ...prev,
          selectedBooth: null,
          currentPage: 'recommendations'
        };
      } else if (prev.currentPage === 'map') {
        return {
          ...prev,
          currentPage: 'recommendations'
        };
      } else if (prev.currentPage === 'recommendations') {
        // Ï∂îÏ≤ú ÌéòÏù¥ÏßÄÏóêÏÑú Îí§Î°úÍ∞ÄÍ∏∞Î•º ÎàÑÎ•¥Î©¥ ÎûúÎî© ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        // GPS Ï∂îÏ†Å Ï§ëÏßÄ
        if (window.gpsService) {
          console.log('üõë Îí§Î°úÍ∞ÄÍ∏∞: GPS Ï∂îÏ†Å Ï§ëÏßÄ Ï§ë...');
          window.gpsService.stopTracking();
          window.gpsService = null;
        }
        
        return {
          ...prev,
          currentUser: null,
          recommendations: [],
          selectedBooth: null,
          currentPage: 'landing'
        };
      } else if (prev.currentPage === 'followup') {
        // Ï∂îÍ∞Ä ÏßàÎ¨∏ ÌéòÏù¥ÏßÄÏóêÏÑú Îí§Î°úÍ∞ÄÍ∏∞Î•º ÎàÑÎ•¥Î©¥ Ìèº ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        return {
          ...prev,
          currentPage: 'form'
        };
      } else if (prev.currentPage === 'form') {
        return {
          ...prev,
          currentUser: null,
          currentPage: 'landing'
        };
      }
      return prev;
    });
  };

  const handleExit = () => {
    console.log('üö™ App.tsx: handleExit Ìò∏Ï∂úÎê®');
    
    // Ìá¥Ïû• ÌôïÏù∏ Î™®Îã¨ ÌëúÏãú
    const confirmed = window.confirm('Ï†ïÎßêÎ°ú Ìá¥Ïû•ÌïòÏãúÍ≤†ÏäµÎãàÍπå?');
    
    if (confirmed) {
      console.log('‚úÖ ÏÇ¨Ïö©ÏûêÍ∞Ä Ìá¥Ïû•ÏùÑ ÌôïÏù∏Ìï®');
      
      // GPS Ï∂îÏ†Å Ï§ëÏßÄ
      if (window.gpsService) {
        console.log('üõë GPS Ï∂îÏ†Å Ï§ëÏßÄ Ï§ë...');
        window.gpsService.stopTracking();
        console.log('‚úÖ GPS Ï∂îÏ†Å Ï§ëÏßÄ ÏôÑÎ£å');
        
        // GPS ÏÑúÎπÑÏä§ Ï†ïÎ¶¨
        window.gpsService = null;
      } else {
        console.log('‚ö†Ô∏è GPS ÏÑúÎπÑÏä§Í∞Ä ÏóÜÏùå');
      }
      
      // Ïï± Ï¥àÍ∏∞Ìôî
      console.log('üîÑ Ïï± ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî Ï§ë...');
      setState({
        currentUser: null,
        userFormData: null,
        recommendations: [],
        boothData: [],
        currentPage: 'landing',
        selectedBooth: null,
        evaluation: null
      });
      console.log('‚úÖ Ïï± ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    } else {
      console.log('‚ùå ÏÇ¨Ïö©ÏûêÍ∞Ä Ìá¥Ïû•ÏùÑ Ï∑®ÏÜåÌï®');
    }
  };

  const renderCurrentPage = () => {
    switch (state.currentPage) {
      case 'landing':
        return <LandingPage onUserValid={handleUserValid} />;
      
      case 'form':
        if (!state.currentUser) return null;
        return (
          <UserFormPage
            onSubmit={handleFormSubmit}
            onBack={handleBack}
          />
        );
      
      case 'followup':
        if (!state.currentUser || !followUpData) return null;
        return (
          <FollowUpQuestionsPage
            summary={followUpData.summary}
            questions={followUpData.questions}
            onSubmit={handleFollowUpSubmit}
            onSkip={handleSkipFollowUp}
            onBack={handleBack}
          />
        );
      
      case 'loading':
        return <LoadingPage />;
      
      case 'recommendations':
        if (!state.currentUser) return null;
        return (
          <MainPage
            user={state.currentUser}
            recommendations={state.recommendations}
            boothData={state.boothData}
            onBack={handleBack}
            onExit={handleExit}
          />
        );
      
      case 'map':
        if (!state.currentUser) return null;
        return (
          <MapPage
            user={state.currentUser}
            recommendations={state.recommendations}
            onBack={handleBack}
          />
        );
      
      case 'survey':
        if (!state.currentUser) return null;
        return (
          <SurveyPage
            user={state.currentUser}
            onComplete={handleSurveyComplete}
          />
        );
      
      case 'complete':
        return <CompletePage />;
      
      case 'detail':
        if (!state.currentUser || !state.selectedBooth) return null;
        // Ï∂îÏ≤ú Î¶¨Ïä§Ìä∏ÏóêÏÑú Ìï¥Îãπ Î∂ÄÏä§Ïùò rationaleÏùÑ Ï∞æÏùå
        const selectedBooth = state.selectedBooth;
        const recommendation = state.recommendations.find(
          rec => rec.id === selectedBooth.id
        );
        return (
          <BoothDetailPage
            user={state.currentUser}
            booth={selectedBooth}
            rationale={recommendation?.rationale}
            onBack={handleBack}
            onUserUpdate={handleUserUpdate}
          />
        );
      
      default:
        return <LandingPage onUserValid={handleUserValid} />;
    }
  };

  return (
    <div className="App">
      {renderCurrentPage()}
    </div>
  );
};

export default App;
